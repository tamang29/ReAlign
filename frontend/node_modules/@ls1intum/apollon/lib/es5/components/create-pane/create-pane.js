"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatePane = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_redux_1 = require("react-redux");
var redux_1 = require("redux");
var diagram_type_1 = require("../../packages/diagram-type");
var activity_preview_1 = require("../../packages/uml-activity-diagram/activity-preview");
var class_preview_1 = require("../../packages/uml-class-diagram/class-preview");
var communication_preview_1 = require("../../packages/uml-communication-diagram/communication-preview");
var component_preview_1 = require("../../packages/uml-component-diagram/component-preview");
var deployment_preview_1 = require("../../packages/uml-deployment-diagram/deployment-preview");
var object_preview_1 = require("../../packages/uml-object-diagram/object-preview");
var use_case_preview_1 = require("../../packages/uml-use-case-diagram/use-case-preview");
var uml_element_repository_1 = require("../../services/uml-element/uml-element-repository");
var tree_1 = require("../../utils/geometry/tree");
var with_canvas_1 = require("../canvas/with-canvas");
var localized_1 = require("../i18n/localized");
var model_store_1 = require("../store/model-store");
var preview_element_component_1 = require("./preview-element-component");
var petri_net_preview_1 = require("../../packages/uml-petri-net/petri-net-preview");
var reachability_graph_preview_1 = require("../../packages/uml-reachability-graph/reachability-graph-preview");
var syntax_tree_preview_1 = require("../../packages/syntax-tree/syntax-tree-preview");
var flowchart_diagram_preview_1 = require("../../packages/flowchart/flowchart-diagram-preview");
var color_legend_1 = require("../../packages/common/color-legend/color-legend");
var create_pane_styles_1 = require("./create-pane-styles");
var bpmn_diagram_preview_1 = require("../../packages/bpmn/bpmn-diagram-preview");
var getInitialState = function (_a) {
    var type = _a.type, canvas = _a.canvas, translate = _a.translate, colorEnabled = _a.colorEnabled;
    var previews = [];
    var utils = [];
    switch (type) {
        case diagram_type_1.UMLDiagramType.ClassDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, class_preview_1.composeClassPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.ObjectDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, object_preview_1.composeObjectPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.ActivityDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, activity_preview_1.composeActivityPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.UseCaseDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, use_case_preview_1.composeUseCasePreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.CommunicationDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, communication_preview_1.composeCommunicationPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.ComponentDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, component_preview_1.composeComponentPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.DeploymentDiagram:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, deployment_preview_1.composeDeploymentPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.PetriNet:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, petri_net_preview_1.composePetriNetPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.ReachabilityGraph:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, reachability_graph_preview_1.composeReachabilityGraphPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.SyntaxTree:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, syntax_tree_preview_1.composeSyntaxTreePreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.Flowchart:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, flowchart_diagram_preview_1.composeFlowchartPreview)(canvas, translate)), false));
            break;
        case diagram_type_1.UMLDiagramType.BPMN:
            previews.push.apply(previews, tslib_1.__spreadArray([], tslib_1.__read((0, bpmn_diagram_preview_1.composeBPMNPreview)(canvas, translate)), false));
            break;
    }
    if (colorEnabled) {
        utils.push(new color_legend_1.ColorLegend({
            name: translate('packages.ColorLegend.ColorLegend'),
        }));
    }
    return { previews: previews, utils: utils };
};
var enhance = (0, redux_1.compose)(localized_1.localized, with_canvas_1.withCanvas, (0, react_redux_1.connect)(function (state) { return ({
    type: state.diagram.type,
    colorEnabled: state.editor.colorEnabled,
}); }, {
    create: uml_element_repository_1.UMLElementRepository.create,
}));
var CreatePaneComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CreatePaneComponent, _super);
    function CreatePaneComponent() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = getInitialState(_this.props);
        _this.getElementArray = function (previews) {
            return Object.values(previews)
                .filter(function (preview) { return !preview.owner; })
                .map(function (preview, index) {
                var _a, _b;
                var previewStyles = preview.styles;
                return (react_1.default.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, previewStyles), { height: preview.bounds.height * ((_b = (_a = _this.props) === null || _a === void 0 ? void 0 : _a.previewScaleFactor) !== null && _b !== void 0 ? _b : 0.8) + 8 }), key: index },
                    react_1.default.createElement(preview_element_component_1.PreviewElementComponent, { element: preview, create: _this.create })));
            });
        };
        _this.create = function (preview, owner) {
            var elements = (0, tree_1.clone)(preview, _this.state.previews);
            _this.props.create(elements, owner);
        };
        return _this;
    }
    CreatePaneComponent.prototype.render = function () {
        var features = {
            hoverable: false,
            selectable: false,
            movable: false,
            resizable: false,
            connectable: false,
            updatable: false,
            droppable: false,
            alternativePortVisualization: false,
        };
        var _a = this.state, previews = _a.previews, utils = _a.utils;
        var elements = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(previews), false), tslib_1.__read(utils), false).reduce(function (state, preview) {
            var _a;
            return (tslib_1.__assign(tslib_1.__assign({}, state), (_a = {}, _a[preview.id] = tslib_1.__assign({}, preview), _a)));
        }, {});
        return (react_1.default.createElement(model_store_1.StoreProvider, { initialState: { elements: elements, editor: { features: features } } },
            this.getElementArray(previews),
            utils && utils.length > 0 ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(create_pane_styles_1.Separator, null),
                this.getElementArray(utils))) : null));
    };
    return CreatePaneComponent;
}(react_1.Component));
exports.CreatePane = enhance(CreatePaneComponent);
//# sourceMappingURL=create-pane.js.map