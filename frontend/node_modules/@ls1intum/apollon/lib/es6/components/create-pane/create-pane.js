import React, { Component } from 'react';
import { connect } from 'react-redux';
import { compose } from 'redux';
import { UMLDiagramType } from '../../packages/diagram-type';
import { composeActivityPreview } from '../../packages/uml-activity-diagram/activity-preview';
import { composeClassPreview } from '../../packages/uml-class-diagram/class-preview';
import { composeCommunicationPreview } from '../../packages/uml-communication-diagram/communication-preview';
import { composeComponentPreview } from '../../packages/uml-component-diagram/component-preview';
import { composeDeploymentPreview } from '../../packages/uml-deployment-diagram/deployment-preview';
import { composeObjectPreview } from '../../packages/uml-object-diagram/object-preview';
import { composeUseCasePreview } from '../../packages/uml-use-case-diagram/use-case-preview';
import { UMLElementRepository } from '../../services/uml-element/uml-element-repository';
import { clone } from '../../utils/geometry/tree';
import { withCanvas } from '../canvas/with-canvas';
import { localized } from '../i18n/localized';
import { StoreProvider } from '../store/model-store';
import { PreviewElementComponent } from './preview-element-component';
import { composePetriNetPreview } from '../../packages/uml-petri-net/petri-net-preview';
import { composeReachabilityGraphPreview } from '../../packages/uml-reachability-graph/reachability-graph-preview';
import { composeSyntaxTreePreview } from '../../packages/syntax-tree/syntax-tree-preview';
import { composeFlowchartPreview } from '../../packages/flowchart/flowchart-diagram-preview';
import { ColorLegend } from '../../packages/common/color-legend/color-legend';
import { Separator } from './create-pane-styles';
import { composeBPMNPreview } from '../../packages/bpmn/bpmn-diagram-preview';
const getInitialState = ({ type, canvas, translate, colorEnabled }) => {
    const previews = [];
    const utils = [];
    switch (type) {
        case UMLDiagramType.ClassDiagram:
            previews.push(...composeClassPreview(canvas, translate));
            break;
        case UMLDiagramType.ObjectDiagram:
            previews.push(...composeObjectPreview(canvas, translate));
            break;
        case UMLDiagramType.ActivityDiagram:
            previews.push(...composeActivityPreview(canvas, translate));
            break;
        case UMLDiagramType.UseCaseDiagram:
            previews.push(...composeUseCasePreview(canvas, translate));
            break;
        case UMLDiagramType.CommunicationDiagram:
            previews.push(...composeCommunicationPreview(canvas, translate));
            break;
        case UMLDiagramType.ComponentDiagram:
            previews.push(...composeComponentPreview(canvas, translate));
            break;
        case UMLDiagramType.DeploymentDiagram:
            previews.push(...composeDeploymentPreview(canvas, translate));
            break;
        case UMLDiagramType.PetriNet:
            previews.push(...composePetriNetPreview(canvas, translate));
            break;
        case UMLDiagramType.ReachabilityGraph:
            previews.push(...composeReachabilityGraphPreview(canvas, translate));
            break;
        case UMLDiagramType.SyntaxTree:
            previews.push(...composeSyntaxTreePreview(canvas, translate));
            break;
        case UMLDiagramType.Flowchart:
            previews.push(...composeFlowchartPreview(canvas, translate));
            break;
        case UMLDiagramType.BPMN:
            previews.push(...composeBPMNPreview(canvas, translate));
            break;
    }
    if (colorEnabled) {
        utils.push(new ColorLegend({
            name: translate('packages.ColorLegend.ColorLegend'),
        }));
    }
    return { previews, utils };
};
const enhance = compose(localized, withCanvas, connect((state) => ({
    type: state.diagram.type,
    colorEnabled: state.editor.colorEnabled,
}), {
    create: UMLElementRepository.create,
}));
class CreatePaneComponent extends Component {
    constructor() {
        super(...arguments);
        this.state = getInitialState(this.props);
        this.getElementArray = (previews) => {
            return Object.values(previews)
                .filter((preview) => !preview.owner)
                .map((preview, index) => {
                const { styles: previewStyles } = preview;
                return (React.createElement("div", { style: { ...previewStyles, height: preview.bounds.height * (this.props?.previewScaleFactor ?? 0.8) + 8 }, key: index },
                    React.createElement(PreviewElementComponent, { element: preview, create: this.create })));
            });
        };
        this.create = (preview, owner) => {
            const elements = clone(preview, this.state.previews);
            this.props.create(elements, owner);
        };
    }
    render() {
        const features = {
            hoverable: false,
            selectable: false,
            movable: false,
            resizable: false,
            connectable: false,
            updatable: false,
            droppable: false,
            alternativePortVisualization: false,
        };
        const { previews, utils } = this.state;
        const elements = [...previews, ...utils].reduce((state, preview) => ({
            ...state,
            [preview.id]: { ...preview },
        }), {});
        return (React.createElement(StoreProvider, { initialState: { elements, editor: { features } } },
            this.getElementArray(previews),
            utils && utils.length > 0 ? (React.createElement(React.Fragment, null,
                React.createElement(Separator, null),
                this.getElementArray(utils))) : null));
    }
}
export const CreatePane = enhance(CreatePaneComponent);
//# sourceMappingURL=create-pane.js.map