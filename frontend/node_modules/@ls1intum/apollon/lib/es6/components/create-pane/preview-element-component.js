import React, { Component } from 'react';
import { Draggable } from '../draggable/draggable';
import { styled } from '../theme/styles';
import { CanvasElement } from '../uml-element/canvas-element';
import { hoverable } from '../uml-element/hoverable/hoverable';
export const Preview = styled(hoverable(CanvasElement)).attrs((props) => ({
    child: CanvasElement,
    scale: props.scale,
})) `
  overflow: visible;
  fill: white;
  scale: ${(props) => props.scale ?? 0.8};
  transform-origin: center center;
`;
export class PreviewElementComponent extends Component {
    constructor() {
        super(...arguments);
        this.onDrop = (event) => {
            const element = this.props.element.clone({
                bounds: { ...this.props.element.bounds, ...event.position },
            });
            this.props.create(element, event.owner);
        };
    }
    render() {
        const { element } = this.props;
        return (React.createElement(Draggable, { onDrop: this.onDrop },
            React.createElement(Preview, { id: element.id })));
    }
}
//# sourceMappingURL=preview-element-component.js.map